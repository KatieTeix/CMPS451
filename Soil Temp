# soiltemp_lstm_full.py

import torch
import torch.nn as nn
import torch.optim as optim
import pandas as pd
import numpy as np
import os

# 1. Load and Prepare Data
print("Loading data...")

df1 = pd.read_csv('psspredict_new01.csv')
df2 = pd.read_csv('psspredict_new02.csv')
df3 = pd.read_csv('psspredict10.csv')
df4 = pd.read_csv('pss10.csv')

# Combine into one DataFrame
data = pd.concat([df1, df2, df3, df4], ignore_index=True)

# Define target and features
target_col = 'SoilTemp'  # Change if your column has a different name
feature_cols = [col for col in data.columns if col != target_col]

X = data[feature_cols].values
y = data[target_col].values

# Normalize Features (important for LSTM stability)
X_mean = X.mean(axis=0)
X_std = X.std(axis=0)
X = (X - X_mean) / X_std

# Convert to torch tensors
X = torch.tensor(X, dtype=torch.float32)
y = torch.tensor(y, dtype=torch.float32)

# Reshape for LSTM: (batch_size, seq_length, features)
X = X.unsqueeze(1)  # Add sequence dimension (seq_length=1)

# 2. Define LSTM Model
class LSTMModel(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, output_size):
        super(LSTMModel, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.fc(out[:, -1, :])  # Output from last timestep
        return out

input_size = X.shape[2]
hidden_size = 64
num_layers = 2
output_size = 1
model = LSTMModel(input_size, hidden_size, num_layers, output_size)

# 3. Train Model
print("Training model...")
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

for epoch in range(50):
    outputs = model(X)
    loss = criterion(outputs.squeeze(), y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if epoch % 10 == 0 or epoch == 49:
        print(f'Epoch [{epoch+1}/50], Loss: {loss.item():.6f}')

# 4. Save Model to ONNX
print("Saving model...")
dummy_input = torch.randn(1, 1, input_size)
onnx_model_path = "soiltemp_lstm.onnx"
torch.onnx.export(model, dummy_input, onnx_model_path,
                  input_names=["input"], output_names=["output"],
                  dynamic_axes={"input": {0: "batch_size"}, "output": {0: "batch_size"}})

print(f"Model exported as '{onnx_model_path}'")

# 5. Load Model Again (ONNX) and Predict
import onnxruntime as ort

print("Loading model for prediction...")
ort_session = ort.InferenceSession(onnx_model_path)

# Example new data for prediction
# Prepare some dummy input (must match feature count)

# Predict
outputs = ort_session.run(["output"], {"input": new_data})
predicted_temp = outputs[0][0][0]

print(f"Predicted Soil Temperature: {predicted_temp:.2f}Â°C")
