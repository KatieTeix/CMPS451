#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>

struct Point {
    double x, y;
};

class KMeans {
public:
    KMeans(int k) : k(k) {
        std::srand(static_cast<unsigned>(std::time(0))); // Seed for randomness
    }

    void fit(std::vector<Point>& points) {
        initializeCentroids(points);
        bool changed;
        do {
            changed = assignClusters(points);
            updateCentroids(points);
        } while (changed);
    }

    void printCentroids() {
        for (int i = 0; i < k; ++i) {
            std::cout << "Centroid " << i + 1 << ": (" << centroids[i].x << ", " << centroids[i].y << ")\n";
        }
    }

private:
    int k;
    std::vector<Point> centroids;
    std::vector<int> cluster; // Stores which cluster each point belongs to

    void initializeCentroids(std::vector<Point>& points) {
        for (int i = 0; i < k; ++i) {
            centroids.push_back(points[std::rand() % points.size()]);
        }
        cluster.resize(points.size(), -1); // Initialize cluster assignments
    }

    bool assignClusters(std::vector<Point>& points) {
        bool changed = false;

        for (size_t i = 0; i < points.size(); ++i) {
            int closest = 0;
            double minDist = distance(points[i], centroids[0]);

            for (int j = 1; j < k; ++j) {
                double dist = distance(points[i], centroids[j]);
                if (dist < minDist) {
                    minDist = dist;
                    closest = j;
                }
            }

            if (cluster[i] != closest) { // Check if assignment changed
                cluster[i] = closest;
                changed = true;
            }
        }

        return changed;
    }

    void updateCentroids(std::vector<Point>& points) {
        std::vector<Point> newCentroids(k, {0, 0});
        std::vector<int> counts(k, 0);

        for (size_t i = 0; i < points.size(); ++i) {
            newCentroids[cluster[i]].x += points[i].x;
            newCentroids[cluster[i]].y += points[i].y;
            counts[cluster[i]]++;
        }

        for (int i = 0; i < k; ++i) {
            if (counts[i] > 0) {
                centroids[i].x = newCentroids[i].x / counts[i];
                centroids[i].y = newCentroids[i].y / counts[i];
            }
        }
    }

    double distance(Point a, Point b) {
        return std::sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    }
};

int main() {
    std::vector<Point> points = {
        {1.0, 2.0}, {1.5, 1.8}, {5.0, 8.0},
        {8.0, 8.0}, {1.0, 0.6}, {9.0, 11.0}
    };

    KMeans kmeans(2); // Create KMeans with 2 clusters
    kmeans.fit(points);
    kmeans.printCentroids();

    return 0;
}
